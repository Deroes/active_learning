function [estimated_proportions proportion_variances chosen_points] ...
      = random_sampling_estimate(sampling_function, response_function, ...
      num_evaluations, inference_method, mean_function, ...
      covariance_function, likelihood, hypersamples, num_samples, ...
      num_f_samples)

  d = size(sampling_function(1), 2);
  
  estimated_proportions = zeros(num_evaluations, 1);
  proportion_variances = zeros(num_evaluations, 1);
  chosen_points = zeros(num_evaluations, d);
  responses = zeros(num_evaluations, 1);
  
  for i = 1:num_evaluations
    chosen_points(i, :) = sampling_function(1);
    responses(i) = response_function(chosen_points(i, :));
    
    test = sampling_function(num_samples);

    [means covariances hypersample_weights] = ...
        estimate_latent_posterior(chosen_points(1:i, :), responses(1:i), ...
                                  test, inference_method, mean_function, ...
                                  covariance_function, likelihood, ...
                                  hypersamples, true);
    
    [estimated_proportion proportion_variance] = ...
        estimate_proportion(means, covariances, hypersample_weights, num_f_samples);
    
    estimated_proportions(i) = ...
                   i / (i + num_samples) * (mean(responses(in_train) == 1)) + ...
        num_samples  / (i + num_samples) * estimated_proportion;
    
    proportion_variances(i) = ...
        num_samples  / (i + num_samples) * proportion_variance;
    
    disp(['random sampling: ' num2str(i) ...
          ' of ' num2str(num_evaluations) ...
          ', current estimate: ' num2str(estimated_proportions(i)) ...
          ' +/- ' num2str(sqrt(proportion_variances(i)))]);
  end

end