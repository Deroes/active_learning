[~, inference_method, mean_function, covariance_function, likelihood] = ...
    check_gp_arguments(hyperparameters, inference_method, ...
                       mean_function, covariance_function, likelihood, ...
                       data, responses);

prior_covariances = zeros(num_observations, num_observations, ...
          size(hypersamples.values, 1));
for i = 1:size(hypersamples.values, 1)
  prior_covariances(:, :, i) = ...
  feval(covariance_function{:}, ...
        hypersamples.values(i, hypersamples.covariance_ind), ...
        data);
end

[purely_random_estimated_proportion purely_random_proportion_variance ...
 purely_random_chosen] = purely_random_surveying_discrete(responses, ...
        in_train, num_evaluations);

disp(['purely random sampling: ' num2str(purely_random_estimated_proportion) ...
      ' +/- ' num2str(sqrt(purely_random_proportion_variance)) ...
      ', actual: ' num2str(actual_proportion)]);

proportion_estimation_function = @(data, responses, in_train) ...
    gp_estimate_proportion_discrete(data, responses, in_train, ...
        prior_covariances, inference_method, mean_function, ...
        covariance_function, likelihood, hypersamples, num_f_samples);

utility_function = @random_utility_discrete;

[random_estimated_proportions random_proportion_variances random_chosen] ...
    = iterative_surveying_discrete(data, responses, in_train, ...
        utility_function, proportion_estimation_function, num_evaluations);

disp(['random sampling: ' num2str(random_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(random_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion)]);

probability_function = @(data, responses, in_train) ...
    gp_probability_discrete(data, responses, in_train, prior_covariances, ...
                            inference_method, mean_function, ...
                            covariance_function, likelihood, hypersamples);

utility_function = @(data, responses, in_train) ...
    uncertainty_utility_discrete(data, responses, in_train, ...
        probability_function);

[uncertainty_estimated_proportions uncertainty_proportion_variances ...
 uncertainty_chosen] = iterative_surveying_discrete(data, responses, ...
        in_train, utility_function, proportion_estimation_function, ...
        num_evaluations);

disp(['uncertainty sampling: ' num2str(uncertainty_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(uncertainty_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion)]);

utility_function = @(data, responses, in_train) ...
    battleship_utility_discrete(data, responses, in_train, ...
        probability_function);

[battleship_estimated_proportions battleship_proportion_variances ...
 battleship_chosen] = iterative_surveying_discrete(data, responses, ...
        in_train, utility_function, proportion_estimation_function, ...
        num_evaluations);

disp(['battleship sampling: ' num2str(battleship_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(battleship_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion)]);

utility_function = @(data, responses, in_train) ...
    optimal_utility_discrete(data, responses, in_train, ...
                             probability_function, ...
                             proportion_estimation_function);

[optimal_estimated_proportions optimal_proportion_variances ...
 optimal_chosen] = iterative_surveying_discrete(data, responses, ...
        in_train, utility_function, proportion_estimation_function, ...
        num_evaluations, true);

disp(['optimal sampling: ' num2str(optimal_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(optimal_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion)]);
