data_directory = '~/work/data/wikipedia/computer_science/processed/topics';
load([data_directory '/wikipedia_topic_vectors.mat', 'topics']);

data = topics;
clear topics;

num_observations = size(data, 1);

responses = false(num_observations, 1);
responses(nips_index) = true;
responses = 2 * responses - 1;
actual_proportion = mean(responses == 1);

positives = find(responses == 1);
negatives = find(responses ~= 1);

in_train = false(num_observations, 1);
in_train(positives(1)) = true;
in_train(negatives(1)) = true;

num_evaluations = 100;
num_test_points = 200;
num_trials = 10;
num_f_samples = 1000;

log_input_scale_prior_mean = -4;
log_input_scale_prior_variance = 1;

log_output_scale_prior_mean = 0;
log_output_scale_prior_variance = 1;

latent_prior_mean_prior_mean = -1;
latent_prior_mean_prior_variance = 0.5;

hypersamples.prior_means = ...
    [latent_prior_mean_prior_mean ...
     log_input_scale_prior_mean ...
     log_output_scale_prior_mean];

hypersamples.prior_variances = ...
    [latent_prior_mean_prior_variance ...
     log_input_scale_prior_variance ...
     log_output_scale_prior_variance];

hypersamples.values = find_ccd_points(hypersamples.prior_means, ...
        hypersamples.prior_variances);

hypersamples.mean_ind = 1;
hypersamples.covariance_ind = 2:3;
hypersamples.likelihood_ind = [];
hypersamples.marginal_ind = 1:3;

hyperparameters.lik = hypersamples.values(1, hypersamples.likelihood_ind);
hyperparameters.mean = hypersamples.values(1, hypersamples.mean_ind);
hyperparameters.cov = hypersamples.values(1, hypersamples.covariance_ind);

inference_method = @infLaplace;
mean_function = @meanConst;
covariance_function = @covSEiso;
likelihood = @likErf;

[~, inference_method, mean_function, covariance_function, likelihood] = ...
    check_gp_arguments(hyperparameters, inference_method, ...
                       mean_function, covariance_function, likelihood, ...
                       data, responses);

[purely_random_estimated_proportion purely_random_proportion_variance ...
 purely_random_chosen] = purely_random_surveying(responses, in_train, ...
        num_evaluations);

disp(['purely random sampling: ' num2str(purely_random_estimated_proportion) ...
      ' +/- ' num2str(sqrt(purely_random_proportion_variance)) ...
      ', actual: ' num2str(actual_proportion)]);

proportion_estimation_function = @(data, responses, test) ...
    gp_estimate_proportion_approximate(data, responses, test, ...
        inference_method, mean_function, covariance_function, ...
        likelihood, hypersamples, num_f_samples, num_test_points, num_trials);

utility_function = @random_utility;
probability_function = @(data, responses, test) gp_probability(data, ...
        responses, test, inference_method, mean_function, ...
        covariance_function, likelihood, hypersamples);

[random_estimated_proportions random_proportion_variances random_chosen] ...
    = iterative_surveying(data, responses, in_train, utility_function, ...
                          proportion_estimation_function, num_evaluations, ...
                          0, true);

random_predictions = probability_function(data(random_chosen, :), ...
        responses(random_chosen), data(~random_chosen, :));
random_likelihood = ...
    sum(log(random_predictions(responses(~random_chosen) == 1))) + ...
    sum(log(1 - random_predictions(responses(~random_chosen) == -1)));

disp(['random sampling: ' num2str(random_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(random_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion) ...
      ', test likelihood: ' num2str(random_likelihood)]);

utility_function = @(data, responses, test) uncertainty_utility(data, ...
        responses, test, probability_function);

[uncertainty_estimated_proportions uncertainty_proportion_variances ...
 uncertainty_chosen] = iterative_surveying(data, responses, in_train, ...
        utility_function, proportion_estimation_function, num_evaluations, ...
        0, true);

uncertainty_predictions = probability_function(data(uncertainty_chosen, :), ...
        responses(uncertainty_chosen), data(~uncertainty_chosen, :));
uncertainty_likelihood = ...
    sum(log(uncertainty_predictions(responses(~uncertainty_chosen) == 1))) + ...
    sum(log(1 - uncertainty_predictions(responses(~uncertainty_chosen) == -1)));

disp(['uncertainty sampling: ' num2str(uncertainty_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(uncertainty_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion) ...
      ', test likelihood: ' num2str(uncertainty_likelihood)]);

utility_function = @(data, responses, test) battleship_utility(data, ...
        responses, test, probability_function);

[battleship_estimated_proportions battleship_proportion_variances ...
 battleship_chosen] = iterative_surveying(data, responses, in_train, ...
        utility_function, proportion_estimation_function, num_evaluations, ...
        0, true);

battleship_predictions = probability_function(data(battleship_chosen, :), ...
        responses(battleship_chosen), data(~battleship_chosen, :));
battleship_likelihood = ...
    sum(log(battleship_predictions(responses(~battleship_chosen) == 1))) + ...
    sum(log(1 - battleship_predictions(responses(~battleship_chosen) == -1)));

disp(['battleship sampling: ' num2str(battleship_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(battleship_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion) ...
      ', test likelihood: ' num2str(battleship_likelihood)]);

utility_function = @(data, responses, test) optimal_utility(data, ...
        responses, test, probability_function, proportion_estimation_function);

[optimal_estimated_proportions optimal_proportion_variances ...
 optimal_chosen] = iterative_surveying(data, responses, in_train, ...
        utility_function, proportion_estimation_function, num_evaluations, ...
        num_test_points, true);

optimal_predictions = probability_function(data(optimal_chosen, :), ...
        responses(optimal_chosen), data(~optimal_chosen, :));
optimal_likelihood = ...
    sum(log(optimal_predictions(responses(~optimal_chosen) == 1))) + ...
    sum(log(1 - optimal_predictions(responses(~optimal_chosen) == -1)));

disp(['optimal sampling: ' num2str(optimal_estimated_proportions(end)) ...
      ' +/- ' num2str(sqrt(optimal_proportion_variances(end))) ...
      ', actual: ' num2str(actual_proportion) ...
      ', test likelihood: ' num2str(optimal_likelihood)]);